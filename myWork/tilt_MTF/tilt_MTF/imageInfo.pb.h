// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageInfo.proto

#ifndef PROTOBUF_imageInfo_2eproto__INCLUDED
#define PROTOBUF_imageInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace camCV {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_imageInfo_2eproto();
void protobuf_AssignDesc_imageInfo_2eproto();
void protobuf_ShutdownFile_imageInfo_2eproto();

class imageInfoExt;
class imageInfo;

enum colorSpace_t {
  sRGB = 0,
  bayer = 1,
  bayer_compact = 2,
  adobe_RGB = 3,
  adobe_RGB_WG = 4,
  YUV = 5,
  HSV = 6,
  CMYK = 7
};
bool colorSpace_t_IsValid(int value);
const colorSpace_t colorSpace_t_MIN = sRGB;
const colorSpace_t colorSpace_t_MAX = CMYK;
const int colorSpace_t_ARRAYSIZE = colorSpace_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* colorSpace_t_descriptor();
inline const ::std::string& colorSpace_t_Name(colorSpace_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    colorSpace_t_descriptor(), value);
}
inline bool colorSpace_t_Parse(
    const ::std::string& name, colorSpace_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<colorSpace_t>(
    colorSpace_t_descriptor(), name, value);
}
// ===================================================================

class imageInfoExt : public ::google::protobuf::Message {
 public:
  imageInfoExt();
  virtual ~imageInfoExt();

  imageInfoExt(const imageInfoExt& from);

  inline imageInfoExt& operator=(const imageInfoExt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageInfoExt& default_instance();

  void Swap(imageInfoExt* other);

  // implements Message ----------------------------------------------

  imageInfoExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageInfoExt& from);
  void MergeFrom(const imageInfoExt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:camCV.imageInfoExt)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_imageInfo_2eproto();
  friend void protobuf_AssignDesc_imageInfo_2eproto();
  friend void protobuf_ShutdownFile_imageInfo_2eproto();

  void InitAsDefaultInstance();
  static imageInfoExt* default_instance_;
};
// -------------------------------------------------------------------

class imageInfo : public ::google::protobuf::Message {
 public:
  imageInfo();
  virtual ~imageInfo();

  imageInfo(const imageInfo& from);

  inline imageInfo& operator=(const imageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const imageInfo& default_instance();

  void Swap(imageInfo* other);

  // implements Message ----------------------------------------------

  imageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const imageInfo& from);
  void MergeFrom(const imageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required fixed32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required fixed32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // required fixed32 depth = 4;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 4;
  inline ::google::protobuf::uint32 depth() const;
  inline void set_depth(::google::protobuf::uint32 value);

  // repeated .camCV.imageInfoExt ext = 5;
  inline int ext_size() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 5;
  inline const ::camCV::imageInfoExt& ext(int index) const;
  inline ::camCV::imageInfoExt* mutable_ext(int index);
  inline ::camCV::imageInfoExt* add_ext();
  inline const ::google::protobuf::RepeatedPtrField< ::camCV::imageInfoExt >&
      ext() const;
  inline ::google::protobuf::RepeatedPtrField< ::camCV::imageInfoExt >*
      mutable_ext();

  // optional fixed32 order = 6 [default = 0];
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 6;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
  inline bool has_colorspace() const;
  inline void clear_colorspace();
  static const int kColorSpaceFieldNumber = 7;
  inline ::camCV::colorSpace_t colorspace() const;
  inline void set_colorspace(::camCV::colorSpace_t value);

  // optional string manufacturer = 8;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 8;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  inline void set_allocated_manufacturer(::std::string* manufacturer);

  // optional string model = 9;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 9;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string digitalTime = 10;
  inline bool has_digitaltime() const;
  inline void clear_digitaltime();
  static const int kDigitalTimeFieldNumber = 10;
  inline const ::std::string& digitaltime() const;
  inline void set_digitaltime(const ::std::string& value);
  inline void set_digitaltime(const char* value);
  inline void set_digitaltime(const char* value, size_t size);
  inline ::std::string* mutable_digitaltime();
  inline ::std::string* release_digitaltime();
  inline void set_allocated_digitaltime(::std::string* digitaltime);

  // optional string createTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional string scene = 12;
  inline bool has_scene() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 12;
  inline const ::std::string& scene() const;
  inline void set_scene(const ::std::string& value);
  inline void set_scene(const char* value);
  inline void set_scene(const char* value, size_t size);
  inline ::std::string* mutable_scene();
  inline ::std::string* release_scene();
  inline void set_allocated_scene(::std::string* scene);

  // optional string creator = 13;
  inline bool has_creator() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 13;
  inline const ::std::string& creator() const;
  inline void set_creator(const ::std::string& value);
  inline void set_creator(const char* value);
  inline void set_creator(const char* value, size_t size);
  inline ::std::string* mutable_creator();
  inline ::std::string* release_creator();
  inline void set_allocated_creator(::std::string* creator);

  // optional string author = 14;
  inline bool has_author() const;
  inline void clear_author();
  static const int kAuthorFieldNumber = 14;
  inline const ::std::string& author() const;
  inline void set_author(const ::std::string& value);
  inline void set_author(const char* value);
  inline void set_author(const char* value, size_t size);
  inline ::std::string* mutable_author();
  inline ::std::string* release_author();
  inline void set_allocated_author(::std::string* author);

  // optional string serialNumber = 15;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 15;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  inline void set_allocated_serialnumber(::std::string* serialnumber);

  // optional string version = 16;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 16;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:camCV.imageInfo)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_colorspace();
  inline void clear_has_colorspace();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_digitaltime();
  inline void clear_has_digitaltime();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_scene();
  inline void clear_has_scene();
  inline void set_has_creator();
  inline void clear_has_creator();
  inline void set_has_author();
  inline void clear_has_author();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 depth_;
  ::google::protobuf::RepeatedPtrField< ::camCV::imageInfoExt > ext_;
  ::google::protobuf::uint32 order_;
  int colorspace_;
  ::std::string* manufacturer_;
  ::std::string* model_;
  ::std::string* digitaltime_;
  ::std::string* createtime_;
  ::std::string* scene_;
  ::std::string* creator_;
  ::std::string* author_;
  ::std::string* serialnumber_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_imageInfo_2eproto();
  friend void protobuf_AssignDesc_imageInfo_2eproto();
  friend void protobuf_ShutdownFile_imageInfo_2eproto();

  void InitAsDefaultInstance();
  static imageInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// imageInfoExt

// required string name = 1;
inline bool imageInfoExt::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void imageInfoExt::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void imageInfoExt::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void imageInfoExt::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& imageInfoExt::name() const {
  return *name_;
}
inline void imageInfoExt::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void imageInfoExt::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void imageInfoExt::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfoExt::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* imageInfoExt::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfoExt::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data = 2;
inline bool imageInfoExt::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void imageInfoExt::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void imageInfoExt::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void imageInfoExt::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& imageInfoExt::data() const {
  return *data_;
}
inline void imageInfoExt::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void imageInfoExt::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void imageInfoExt::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfoExt::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* imageInfoExt::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfoExt::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// imageInfo

// required fixed32 width = 1;
inline bool imageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void imageInfo::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void imageInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void imageInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 imageInfo::width() const {
  return width_;
}
inline void imageInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required fixed32 height = 2;
inline bool imageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void imageInfo::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void imageInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void imageInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 imageInfo::height() const {
  return height_;
}
inline void imageInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// required fixed32 channel = 3;
inline bool imageInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void imageInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void imageInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void imageInfo::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 imageInfo::channel() const {
  return channel_;
}
inline void imageInfo::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// required fixed32 depth = 4;
inline bool imageInfo::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void imageInfo::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void imageInfo::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void imageInfo::clear_depth() {
  depth_ = 0u;
  clear_has_depth();
}
inline ::google::protobuf::uint32 imageInfo::depth() const {
  return depth_;
}
inline void imageInfo::set_depth(::google::protobuf::uint32 value) {
  set_has_depth();
  depth_ = value;
}

// repeated .camCV.imageInfoExt ext = 5;
inline int imageInfo::ext_size() const {
  return ext_.size();
}
inline void imageInfo::clear_ext() {
  ext_.Clear();
}
inline const ::camCV::imageInfoExt& imageInfo::ext(int index) const {
  return ext_.Get(index);
}
inline ::camCV::imageInfoExt* imageInfo::mutable_ext(int index) {
  return ext_.Mutable(index);
}
inline ::camCV::imageInfoExt* imageInfo::add_ext() {
  return ext_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::camCV::imageInfoExt >&
imageInfo::ext() const {
  return ext_;
}
inline ::google::protobuf::RepeatedPtrField< ::camCV::imageInfoExt >*
imageInfo::mutable_ext() {
  return &ext_;
}

// optional fixed32 order = 6 [default = 0];
inline bool imageInfo::has_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void imageInfo::set_has_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void imageInfo::clear_has_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void imageInfo::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 imageInfo::order() const {
  return order_;
}
inline void imageInfo::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
}

// optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
inline bool imageInfo::has_colorspace() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void imageInfo::set_has_colorspace() {
  _has_bits_[0] |= 0x00000040u;
}
inline void imageInfo::clear_has_colorspace() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void imageInfo::clear_colorspace() {
  colorspace_ = 0;
  clear_has_colorspace();
}
inline ::camCV::colorSpace_t imageInfo::colorspace() const {
  return static_cast< ::camCV::colorSpace_t >(colorspace_);
}
inline void imageInfo::set_colorspace(::camCV::colorSpace_t value) {
  assert(::camCV::colorSpace_t_IsValid(value));
  set_has_colorspace();
  colorspace_ = value;
}

// optional string manufacturer = 8;
inline bool imageInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void imageInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void imageInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void imageInfo::clear_manufacturer() {
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    manufacturer_->clear();
  }
  clear_has_manufacturer();
}
inline const ::std::string& imageInfo::manufacturer() const {
  return *manufacturer_;
}
inline void imageInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
}
inline void imageInfo::set_manufacturer(const char* value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
}
inline void imageInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_manufacturer() {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  return manufacturer_;
}
inline ::std::string* imageInfo::release_manufacturer() {
  clear_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manufacturer_;
    manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (manufacturer) {
    set_has_manufacturer();
    manufacturer_ = manufacturer;
  } else {
    clear_has_manufacturer();
    manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 9;
inline bool imageInfo::has_model() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void imageInfo::set_has_model() {
  _has_bits_[0] |= 0x00000100u;
}
inline void imageInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void imageInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& imageInfo::model() const {
  return *model_;
}
inline void imageInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void imageInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void imageInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* imageInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string digitalTime = 10;
inline bool imageInfo::has_digitaltime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void imageInfo::set_has_digitaltime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void imageInfo::clear_has_digitaltime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void imageInfo::clear_digitaltime() {
  if (digitaltime_ != &::google::protobuf::internal::kEmptyString) {
    digitaltime_->clear();
  }
  clear_has_digitaltime();
}
inline const ::std::string& imageInfo::digitaltime() const {
  return *digitaltime_;
}
inline void imageInfo::set_digitaltime(const ::std::string& value) {
  set_has_digitaltime();
  if (digitaltime_ == &::google::protobuf::internal::kEmptyString) {
    digitaltime_ = new ::std::string;
  }
  digitaltime_->assign(value);
}
inline void imageInfo::set_digitaltime(const char* value) {
  set_has_digitaltime();
  if (digitaltime_ == &::google::protobuf::internal::kEmptyString) {
    digitaltime_ = new ::std::string;
  }
  digitaltime_->assign(value);
}
inline void imageInfo::set_digitaltime(const char* value, size_t size) {
  set_has_digitaltime();
  if (digitaltime_ == &::google::protobuf::internal::kEmptyString) {
    digitaltime_ = new ::std::string;
  }
  digitaltime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_digitaltime() {
  set_has_digitaltime();
  if (digitaltime_ == &::google::protobuf::internal::kEmptyString) {
    digitaltime_ = new ::std::string;
  }
  return digitaltime_;
}
inline ::std::string* imageInfo::release_digitaltime() {
  clear_has_digitaltime();
  if (digitaltime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = digitaltime_;
    digitaltime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_digitaltime(::std::string* digitaltime) {
  if (digitaltime_ != &::google::protobuf::internal::kEmptyString) {
    delete digitaltime_;
  }
  if (digitaltime) {
    set_has_digitaltime();
    digitaltime_ = digitaltime;
  } else {
    clear_has_digitaltime();
    digitaltime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string createTime = 11;
inline bool imageInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void imageInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void imageInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void imageInfo::clear_createtime() {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    createtime_->clear();
  }
  clear_has_createtime();
}
inline const ::std::string& imageInfo::createtime() const {
  return *createtime_;
}
inline void imageInfo::set_createtime(const ::std::string& value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void imageInfo::set_createtime(const char* value) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(value);
}
inline void imageInfo::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  createtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_createtime() {
  set_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    createtime_ = new ::std::string;
  }
  return createtime_;
}
inline ::std::string* imageInfo::release_createtime() {
  clear_has_createtime();
  if (createtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtime_;
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_createtime(::std::string* createtime) {
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (createtime) {
    set_has_createtime();
    createtime_ = createtime;
  } else {
    clear_has_createtime();
    createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string scene = 12;
inline bool imageInfo::has_scene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void imageInfo::set_has_scene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void imageInfo::clear_has_scene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void imageInfo::clear_scene() {
  if (scene_ != &::google::protobuf::internal::kEmptyString) {
    scene_->clear();
  }
  clear_has_scene();
}
inline const ::std::string& imageInfo::scene() const {
  return *scene_;
}
inline void imageInfo::set_scene(const ::std::string& value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::kEmptyString) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
}
inline void imageInfo::set_scene(const char* value) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::kEmptyString) {
    scene_ = new ::std::string;
  }
  scene_->assign(value);
}
inline void imageInfo::set_scene(const char* value, size_t size) {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::kEmptyString) {
    scene_ = new ::std::string;
  }
  scene_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_scene() {
  set_has_scene();
  if (scene_ == &::google::protobuf::internal::kEmptyString) {
    scene_ = new ::std::string;
  }
  return scene_;
}
inline ::std::string* imageInfo::release_scene() {
  clear_has_scene();
  if (scene_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scene_;
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_scene(::std::string* scene) {
  if (scene_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_;
  }
  if (scene) {
    set_has_scene();
    scene_ = scene;
  } else {
    clear_has_scene();
    scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creator = 13;
inline bool imageInfo::has_creator() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void imageInfo::set_has_creator() {
  _has_bits_[0] |= 0x00001000u;
}
inline void imageInfo::clear_has_creator() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void imageInfo::clear_creator() {
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    creator_->clear();
  }
  clear_has_creator();
}
inline const ::std::string& imageInfo::creator() const {
  return *creator_;
}
inline void imageInfo::set_creator(const ::std::string& value) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(value);
}
inline void imageInfo::set_creator(const char* value) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(value);
}
inline void imageInfo::set_creator(const char* value, size_t size) {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  creator_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_creator() {
  set_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    creator_ = new ::std::string;
  }
  return creator_;
}
inline ::std::string* imageInfo::release_creator() {
  clear_has_creator();
  if (creator_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creator_;
    creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_creator(::std::string* creator) {
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  if (creator) {
    set_has_creator();
    creator_ = creator;
  } else {
    clear_has_creator();
    creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string author = 14;
inline bool imageInfo::has_author() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void imageInfo::set_has_author() {
  _has_bits_[0] |= 0x00002000u;
}
inline void imageInfo::clear_has_author() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void imageInfo::clear_author() {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    author_->clear();
  }
  clear_has_author();
}
inline const ::std::string& imageInfo::author() const {
  return *author_;
}
inline void imageInfo::set_author(const ::std::string& value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void imageInfo::set_author(const char* value) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(value);
}
inline void imageInfo::set_author(const char* value, size_t size) {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  author_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_author() {
  set_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    author_ = new ::std::string;
  }
  return author_;
}
inline ::std::string* imageInfo::release_author() {
  clear_has_author();
  if (author_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = author_;
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_author(::std::string* author) {
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (author) {
    set_has_author();
    author_ = author;
  } else {
    clear_has_author();
    author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string serialNumber = 15;
inline bool imageInfo::has_serialnumber() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void imageInfo::set_has_serialnumber() {
  _has_bits_[0] |= 0x00004000u;
}
inline void imageInfo::clear_has_serialnumber() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void imageInfo::clear_serialnumber() {
  if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    serialnumber_->clear();
  }
  clear_has_serialnumber();
}
inline const ::std::string& imageInfo::serialnumber() const {
  return *serialnumber_;
}
inline void imageInfo::set_serialnumber(const ::std::string& value) {
  set_has_serialnumber();
  if (serialnumber_ == &::google::protobuf::internal::kEmptyString) {
    serialnumber_ = new ::std::string;
  }
  serialnumber_->assign(value);
}
inline void imageInfo::set_serialnumber(const char* value) {
  set_has_serialnumber();
  if (serialnumber_ == &::google::protobuf::internal::kEmptyString) {
    serialnumber_ = new ::std::string;
  }
  serialnumber_->assign(value);
}
inline void imageInfo::set_serialnumber(const char* value, size_t size) {
  set_has_serialnumber();
  if (serialnumber_ == &::google::protobuf::internal::kEmptyString) {
    serialnumber_ = new ::std::string;
  }
  serialnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_serialnumber() {
  set_has_serialnumber();
  if (serialnumber_ == &::google::protobuf::internal::kEmptyString) {
    serialnumber_ = new ::std::string;
  }
  return serialnumber_;
}
inline ::std::string* imageInfo::release_serialnumber() {
  clear_has_serialnumber();
  if (serialnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialnumber_;
    serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete serialnumber_;
  }
  if (serialnumber) {
    set_has_serialnumber();
    serialnumber_ = serialnumber;
  } else {
    clear_has_serialnumber();
    serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 16;
inline bool imageInfo::has_version() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void imageInfo::set_has_version() {
  _has_bits_[0] |= 0x00008000u;
}
inline void imageInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void imageInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& imageInfo::version() const {
  return *version_;
}
inline void imageInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void imageInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void imageInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* imageInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* imageInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void imageInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace camCV

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::camCV::colorSpace_t>() {
  return ::camCV::colorSpace_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_imageInfo_2eproto__INCLUDED
