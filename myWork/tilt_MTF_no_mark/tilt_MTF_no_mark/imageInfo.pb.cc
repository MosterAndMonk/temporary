// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imageInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imageInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace camCV {

namespace {

const ::google::protobuf::Descriptor* imageInfoExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imageInfoExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* imageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  imageInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* colorSpace_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_imageInfo_2eproto() {
  protobuf_AddDesc_imageInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "imageInfo.proto");
  GOOGLE_CHECK(file != NULL);
  imageInfoExt_descriptor_ = file->message_type(0);
  static const int imageInfoExt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfoExt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfoExt, data_),
  };
  imageInfoExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      imageInfoExt_descriptor_,
      imageInfoExt::default_instance_,
      imageInfoExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfoExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfoExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(imageInfoExt));
  imageInfo_descriptor_ = file->message_type(1);
  static const int imageInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, colorspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, digitaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, version_),
  };
  imageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      imageInfo_descriptor_,
      imageInfo::default_instance_,
      imageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(imageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(imageInfo));
  colorSpace_t_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_imageInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    imageInfoExt_descriptor_, &imageInfoExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    imageInfo_descriptor_, &imageInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_imageInfo_2eproto() {
  delete imageInfoExt::default_instance_;
  delete imageInfoExt_reflection_;
  delete imageInfo::default_instance_;
  delete imageInfo_reflection_;
}

void protobuf_AddDesc_imageInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017imageInfo.proto\022\005camCV\"*\n\014imageInfoExt"
    "\022\014\n\004name\030\001 \002(\t\022\014\n\004data\030\002 \001(\t\"\322\002\n\timageIn"
    "fo\022\r\n\005width\030\001 \002(\007\022\016\n\006height\030\002 \002(\007\022\017\n\007cha"
    "nnel\030\003 \002(\007\022\r\n\005depth\030\004 \002(\007\022 \n\003ext\030\005 \003(\0132\023"
    ".camCV.imageInfoExt\022\020\n\005order\030\006 \001(\007:\0010\022-\n"
    "\ncolorSpace\030\007 \001(\0162\023.camCV.colorSpace_t:\004"
    "sRGB\022\024\n\014manufacturer\030\010 \001(\t\022\r\n\005model\030\t \001("
    "\t\022\023\n\013digitalTime\030\n \001(\t\022\022\n\ncreateTime\030\013 \001"
    "(\t\022\r\n\005scene\030\014 \001(\t\022\017\n\007creator\030\r \001(\t\022\016\n\006au"
    "thor\030\016 \001(\t\022\024\n\014serialNumber\030\017 \001(\t\022\017\n\007vers"
    "ion\030\020 \001(\t*s\n\014colorSpace_t\022\010\n\004sRGB\020\000\022\t\n\005b"
    "ayer\020\001\022\021\n\rbayer_compact\020\002\022\r\n\tadobe_RGB\020\003"
    "\022\020\n\014adobe_RGB_WG\020\004\022\007\n\003YUV\020\005\022\007\n\003HSV\020\006\022\010\n\004"
    "CMYK\020\007", 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imageInfo.proto", &protobuf_RegisterTypes);
  imageInfoExt::default_instance_ = new imageInfoExt();
  imageInfo::default_instance_ = new imageInfo();
  imageInfoExt::default_instance_->InitAsDefaultInstance();
  imageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_imageInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_imageInfo_2eproto {
  StaticDescriptorInitializer_imageInfo_2eproto() {
    protobuf_AddDesc_imageInfo_2eproto();
  }
} static_descriptor_initializer_imageInfo_2eproto_;
const ::google::protobuf::EnumDescriptor* colorSpace_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return colorSpace_t_descriptor_;
}
bool colorSpace_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int imageInfoExt::kNameFieldNumber;
const int imageInfoExt::kDataFieldNumber;
#endif  // !_MSC_VER

imageInfoExt::imageInfoExt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void imageInfoExt::InitAsDefaultInstance() {
}

imageInfoExt::imageInfoExt(const imageInfoExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void imageInfoExt::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imageInfoExt::~imageInfoExt() {
  SharedDtor();
}

void imageInfoExt::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void imageInfoExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imageInfoExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imageInfoExt_descriptor_;
}

const imageInfoExt& imageInfoExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageInfo_2eproto();
  return *default_instance_;
}

imageInfoExt* imageInfoExt::default_instance_ = NULL;

imageInfoExt* imageInfoExt::New() const {
  return new imageInfoExt;
}

void imageInfoExt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool imageInfoExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void imageInfoExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* imageInfoExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int imageInfoExt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imageInfoExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const imageInfoExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const imageInfoExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void imageInfoExt::MergeFrom(const imageInfoExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void imageInfoExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imageInfoExt::CopyFrom(const imageInfoExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageInfoExt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void imageInfoExt::Swap(imageInfoExt* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata imageInfoExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imageInfoExt_descriptor_;
  metadata.reflection = imageInfoExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int imageInfo::kWidthFieldNumber;
const int imageInfo::kHeightFieldNumber;
const int imageInfo::kChannelFieldNumber;
const int imageInfo::kDepthFieldNumber;
const int imageInfo::kExtFieldNumber;
const int imageInfo::kOrderFieldNumber;
const int imageInfo::kColorSpaceFieldNumber;
const int imageInfo::kManufacturerFieldNumber;
const int imageInfo::kModelFieldNumber;
const int imageInfo::kDigitalTimeFieldNumber;
const int imageInfo::kCreateTimeFieldNumber;
const int imageInfo::kSceneFieldNumber;
const int imageInfo::kCreatorFieldNumber;
const int imageInfo::kAuthorFieldNumber;
const int imageInfo::kSerialNumberFieldNumber;
const int imageInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

imageInfo::imageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void imageInfo::InitAsDefaultInstance() {
}

imageInfo::imageInfo(const imageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void imageInfo::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  channel_ = 0u;
  depth_ = 0u;
  order_ = 0u;
  colorspace_ = 0;
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  digitaltime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

imageInfo::~imageInfo() {
  SharedDtor();
}

void imageInfo::SharedDtor() {
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (digitaltime_ != &::google::protobuf::internal::kEmptyString) {
    delete digitaltime_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (scene_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_;
  }
  if (creator_ != &::google::protobuf::internal::kEmptyString) {
    delete creator_;
  }
  if (author_ != &::google::protobuf::internal::kEmptyString) {
    delete author_;
  }
  if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete serialnumber_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void imageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* imageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return imageInfo_descriptor_;
}

const imageInfo& imageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_imageInfo_2eproto();
  return *default_instance_;
}

imageInfo* imageInfo::default_instance_ = NULL;

imageInfo* imageInfo::New() const {
  return new imageInfo;
}

void imageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
    channel_ = 0u;
    depth_ = 0u;
    order_ = 0u;
    colorspace_ = 0;
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        manufacturer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_digitaltime()) {
      if (digitaltime_ != &::google::protobuf::internal::kEmptyString) {
        digitaltime_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    if (has_scene()) {
      if (scene_ != &::google::protobuf::internal::kEmptyString) {
        scene_->clear();
      }
    }
    if (has_creator()) {
      if (creator_ != &::google::protobuf::internal::kEmptyString) {
        creator_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::kEmptyString) {
        author_->clear();
      }
    }
    if (has_serialnumber()) {
      if (serialnumber_ != &::google::protobuf::internal::kEmptyString) {
        serialnumber_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool imageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // required fixed32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_channel;
        break;
      }

      // required fixed32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_depth;
        break;
      }

      // required fixed32 depth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ext;
        break;
      }

      // repeated .camCV.imageInfoExt ext = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ext;
        if (input->ExpectTag(53)) goto parse_order;
        break;
      }

      // optional fixed32 order = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_colorSpace;
        break;
      }

      // optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorSpace:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::camCV::colorSpace_t_IsValid(value)) {
            set_colorspace(static_cast< ::camCV::colorSpace_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_model;
        break;
      }

      // optional string model = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_digitalTime;
        break;
      }

      // optional string digitalTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digitalTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digitaltime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->digitaltime().data(), this->digitaltime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_createTime;
        break;
      }

      // optional string createTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_scene;
        break;
      }

      // optional string scene = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scene().data(), this->scene().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_creator;
        break;
      }

      // optional string creator = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creator().data(), this->creator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_author;
        break;
      }

      // optional string author = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_serialNumber;
        break;
      }

      // optional string serialNumber = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialnumber().data(), this->serialnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_version;
        break;
      }

      // optional string version = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void imageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->width(), output);
  }

  // required fixed32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->height(), output);
  }

  // required fixed32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->channel(), output);
  }

  // required fixed32 depth = 4;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->depth(), output);
  }

  // repeated .camCV.imageInfoExt ext = 5;
  for (int i = 0; i < this->ext_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ext(i), output);
  }

  // optional fixed32 order = 6 [default = 0];
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->order(), output);
  }

  // optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
  if (has_colorspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->colorspace(), output);
  }

  // optional string manufacturer = 8;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->manufacturer(), output);
  }

  // optional string model = 9;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->model(), output);
  }

  // optional string digitalTime = 10;
  if (has_digitaltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digitaltime().data(), this->digitaltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->digitaltime(), output);
  }

  // optional string createTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->createtime(), output);
  }

  // optional string scene = 12;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->scene(), output);
  }

  // optional string creator = 13;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->creator(), output);
  }

  // optional string author = 14;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->author(), output);
  }

  // optional string serialNumber = 15;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->serialnumber(), output);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* imageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->width(), target);
  }

  // required fixed32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->height(), target);
  }

  // required fixed32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->channel(), target);
  }

  // required fixed32 depth = 4;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->depth(), target);
  }

  // repeated .camCV.imageInfoExt ext = 5;
  for (int i = 0; i < this->ext_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ext(i), target);
  }

  // optional fixed32 order = 6 [default = 0];
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->order(), target);
  }

  // optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
  if (has_colorspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->colorspace(), target);
  }

  // optional string manufacturer = 8;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->manufacturer(), target);
  }

  // optional string model = 9;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->model(), target);
  }

  // optional string digitalTime = 10;
  if (has_digitaltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digitaltime().data(), this->digitaltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->digitaltime(), target);
  }

  // optional string createTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->createtime(), target);
  }

  // optional string scene = 12;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene().data(), this->scene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->scene(), target);
  }

  // optional string creator = 13;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creator().data(), this->creator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->creator(), target);
  }

  // optional string author = 14;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->author(), target);
  }

  // optional string serialNumber = 15;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialnumber().data(), this->serialnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->serialnumber(), target);
  }

  // optional string version = 16;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int imageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // required fixed32 height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // required fixed32 channel = 3;
    if (has_channel()) {
      total_size += 1 + 4;
    }

    // required fixed32 depth = 4;
    if (has_depth()) {
      total_size += 1 + 4;
    }

    // optional fixed32 order = 6 [default = 0];
    if (has_order()) {
      total_size += 1 + 4;
    }

    // optional .camCV.colorSpace_t colorSpace = 7 [default = sRGB];
    if (has_colorspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->colorspace());
    }

    // optional string manufacturer = 8;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string model = 9;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string digitalTime = 10;
    if (has_digitaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digitaltime());
    }

    // optional string createTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional string scene = 12;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene());
    }

    // optional string creator = 13;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creator());
    }

    // optional string author = 14;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional string serialNumber = 15;
    if (has_serialnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialnumber());
    }

    // optional string version = 16;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .camCV.imageInfoExt ext = 5;
  total_size += 1 * this->ext_size();
  for (int i = 0; i < this->ext_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void imageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const imageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const imageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void imageInfo::MergeFrom(const imageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ext_.MergeFrom(from.ext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_colorspace()) {
      set_colorspace(from.colorspace());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_digitaltime()) {
      set_digitaltime(from.digitaltime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_creator()) {
      set_creator(from.creator());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void imageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imageInfo::CopyFrom(const imageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < ext_size(); i++) {
    if (!this->ext(i).IsInitialized()) return false;
  }
  return true;
}

void imageInfo::Swap(imageInfo* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(channel_, other->channel_);
    std::swap(depth_, other->depth_);
    ext_.Swap(&other->ext_);
    std::swap(order_, other->order_);
    std::swap(colorspace_, other->colorspace_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(model_, other->model_);
    std::swap(digitaltime_, other->digitaltime_);
    std::swap(createtime_, other->createtime_);
    std::swap(scene_, other->scene_);
    std::swap(creator_, other->creator_);
    std::swap(author_, other->author_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata imageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = imageInfo_descriptor_;
  metadata.reflection = imageInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace camCV

// @@protoc_insertion_point(global_scope)
